"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.DeviceConfigurationHelper=void 0;const APIInvocationHelper_1=require("./APIInvocationHelper"),BaseHelper_1=require("./BaseHelper");class DeviceConfigurationHelper extends BaseHelper_1.BaseHelper{constructor(e,t){super(e,t)}static Instance(e,t){return this._instance?(this._instance.config=e,this._instance.log=t):this._instance=new this(e,t),this._instance}fetchDevices(e){return new Promise((t=>{this.log.debug(`This is the config: ${JSON.stringify(this.config)}`),this.config.autoFetchRemotesFromServer?(this.log.info("Auto discovery of remotes enabled. Fetching with API..."),this.autoFetch(e,t)):(this.log.info("Auto discovery of remotes disabled..."),this.manualFetch(t))}))}manualFetch(e){const t=[];for(let i=0;i<this.config.configuredRemotes.length;i++){const s=this.config.configuredRemotes[i];this.fetchRemoteDetails(this.config.irDeviceId,s.id,(i=>{i.config=this.config,i.diy=s.diy,t.push(i),t.length==this.config.configuredRemotes.length&&e(t)}))}}autoFetch(e,t){APIInvocationHelper_1.APIInvocationHelper.invokeTuyaIrApi(this.log,this.config,`${this.apiHost}/v2.0/infrareds/${e}/remotes`,"GET",{},(i=>{const s=[];if(i.success&&i.result){this.log.debug(`API returned ${i.result.length} remotes...`);for(let o=0;o<i.result.length;o++)this.fetchRemoteDetails(e,i.result[o].remote_id,(e=>{e.config=this.config,s.push(e),s.length==i.result.length&&t(s)}))}else this.log.warn("API didn't return any devices Using hardcoded devices..."),this.manualFetch(t)}))}fetchRemoteDetails(e,t,i){this.log.debug(this.apiHost+`/v1.0/devices/${t}`),APIInvocationHelper_1.APIInvocationHelper.invokeTuyaIrApi(this.log,this.config,this.apiHost+`/v1.0/devices/${t}`,"GET",{},(e=>{e.success?i(e.result):(this.log.error("Failed to get remote configuration for: "+t),this.log.error(`Server returned error: '${e.msg}'`),i({}))}))}}exports.DeviceConfigurationHelper=DeviceConfigurationHelper;