"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.LoginHelper=void 0;const https_1=__importDefault(require("https")),url_1=require("url"),APIInvocationHelper_1=require("./APIInvocationHelper"),BaseHelper_1=require("./BaseHelper");class LoginHelper extends BaseHelper_1.BaseHelper{constructor(e,s){super(e,s),this.accessToken="",this.refreshToken=""}static Instance(e,s){return this._instance||(this._instance=new this(e,s))}getAccessToken(){return this.accessToken}login(){return new Promise(((e,s)=>{this.log.debug(`Logging in to the the server ${this.apiHost}...`),this.invokeTuyaLoginAPI(this.apiHost+"/v1.0/token?grant_type=1",(t=>{t.success?(this.extractAccessTokenFromAPIResponse(t),this.configureNextAccessTokenRefresh(t.result.expire_time),this.log.info("Login successful."),e("")):(this.handleLoginError(t.msg),s(t.msg))}))}))}invokeTuyaLoginAPI(e,s){const t=(new Date).getTime(),r=APIInvocationHelper_1.APIInvocationHelper.getSignedValuesForGetWithoutAccessToken(new url_1.URL(e),this.config,t),o={url:e,headers:{client_id:this.config.tuyaAPIClientId,sign:r.signKey,t:t,sign_method:"HMAC-SHA256",nonce:""}};this.log.debug(JSON.stringify(o)),https_1.default.get(e,o,(e=>{let t="";e.on("data",(e=>{t+=e})),e.on("end",(()=>{if(this.log.debug(t),200!=e.statusCode)this.log.error("Api call failed with response code "+e.statusCode);else{let e;try{e=JSON.parse(t)}catch(s){e={msg:`Unable to parse body because '${s}'`}}this.log.debug("API call successful."),s(e)}}))})).on("error",(e=>{this.log.error("API call failed."),this.log.error(e.message,e.stack)}))}refreshAccessToken(){this.log.info("Need to refresh token now..."),this.invokeTuyaLoginAPI(this.apiHost+"/v1.0/token/"+this.refreshToken,(e=>{e.success?(this.extractAccessTokenFromAPIResponse(e),this.configureNextAccessTokenRefresh(e.result.expire_time),this.log.info(`Token refreshed successfully. Next refresh after ${e.result.expire_time} seconds`)):(this.log.error(`Unable to refresh token: ${e.msg}. Trying fresh login...`),this.login())}))}configureNextAccessTokenRefresh(e){setTimeout((()=>{this.refreshAccessToken()}),1e3*(e-5))}extractAccessTokenFromAPIResponse(e){this.accessToken=e.result.access_token,this.refreshToken=e.result.refresh_token}handleLoginError(e){this.log.error(`Failed to login due to error '${e}'. Retying after 1 minute...`),setTimeout((()=>{this.login()}),6e4)}}exports.LoginHelper=LoginHelper;