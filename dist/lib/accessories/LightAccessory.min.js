"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.LightAccessory=void 0;const BaseAccessory_1=require("./BaseAccessory"),APIInvocationHelper_1=require("../api/APIInvocationHelper");class LightAccessory extends BaseAccessory_1.BaseAccessory{constructor(t,s){var e,i;super(t,s),this.platform=t,this.accessory=s,this.lightState={On:!1,brightness:50},this.sendCommandAPIURL=`${this.configuration.apiHost}/v1.0/iot-03/devices/${s.context.device.id}/commands`,null===(i=null===(e=this.accessory)||void 0===e?void 0:e.getService(this.platform.Service.AccessoryInformation))||void 0===i||i.setCharacteristic(this.platform.Characteristic.Manufacturer,s.context.device.product_name).setCharacteristic(this.platform.Characteristic.Model,"Infrared Controlled Light").setCharacteristic(this.platform.Characteristic.SerialNumber,s.context.device.id),this.service=this.accessory.getService(this.platform.Service.Lightbulb)||this.accessory.addService(this.platform.Service.Lightbulb),this.service.setCharacteristic(this.platform.Characteristic.Name,s.context.device.name),this.service.getCharacteristic(this.platform.Characteristic.On).onSet(this.setOn.bind(this)).onGet(this.getOn.bind(this)),this.service.getCharacteristic(this.platform.Characteristic.Brightness).onSet(this.setBrightness.bind(this)).onGet(this.getBrightness.bind(this))}setOn(t){if(t!==this.lightState.On){const s=t?"PowerOn":"PowerOff";this.sendLightCommand(s,(s=>{s.success?(this.log.info(`${this.accessory.displayName} is now ${0==t?"Off":"On"}`),this.lightState.On=t):this.log.error(`Failed to change ${this.accessory.displayName} status due to error ${s.msg}`)}))}}getOn(){return this.lightState.On}getBrightness(){return this.lightState.brightness}setBrightness(t){const s=t<=this.lightState.brightness?"Brightness-":"Brightness+";this.sendLightCommand(s,(t=>{t.success?(this.log.info(`${this.accessory.displayName} is brightness is now ${"Brightness+"===s?"increased":"decreased"}`),this.lightState.On&&(this.log.debug("Resetting slider to 50%"),this.service.updateCharacteristic(this.platform.Characteristic.Brightness,50))):this.log.error(`Failed to change ${this.accessory.displayName} brightness due to error ${t.msg}`)}))}sendLightCommand(t,s){const e={commands:[{code:t,value:1}]};APIInvocationHelper_1.APIInvocationHelper.invokeTuyaIrApi(this.log,this.configuration,this.sendCommandAPIURL,"POST",e,(t=>{s(t)}))}}exports.LightAccessory=LightAccessory;